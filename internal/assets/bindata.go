// Code generated by "esc -pkg assets -o internal/assets/bindata.go ./internal/template/"; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/internal/template/element.go": {
		name:    "element.go",
		local:   "internal/template/element.go",
		size:    43,
		modtime: 1556031448,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKEnNLchJLEnl4iqpLEhVcM1JzU3NK1HIzCtJLUpLTE6truUCBAAA//+O
KzUSKwAAAA==
`,
	},

	"/internal/template/hashset.go": {
		name:    "hashset.go",
		local:   "internal/template/hashset.go",
		size:    1366,
		modtime: 1556042485,
		compressed: `
H4sIAAAAAAAC/6ySQWvbQBCFz5pf8ZpDWRWh9JziQyiFHtIenJYejAlbeWQLjXaFduU2GP33ImmtGGyF
GHodad735u2rdVbqLcNzVYv2TFRUtW08FEU37tlkNxQT+eea8VW73SN7ON+0mceBIhZ2qHS9+iJcsfHr
8dOhI4qqFv16uvz1rfX8lzqivDUZvvOfIKRifDhqHihq2LeNwfswOlA06N9dBBy6hKJuElVukopxv9mo
PcJG3Eu7tGrTB5uVKqZowzk3GEY/jYShS3vWar/GAi+MWf17ESVI0/Q6Sm4bPCXY426BRpstQ/rFOfrc
gUuu7J6vvnHDwp7VCEuwj19T/88XnrPnjvssrBt11bNhMdORGYI1XhfGnQb421qZkMsLzOUL9CmBLfsD
p2ebymvL15HnqV4Dngu3yHHu6RPe2XL4fDSXa3FMUTQU6zj0TcuXPT+wUTEK499qLygKm/DOQ8Fub/HD
PkqRMcYfHLSBGwbZGEthttAisDn8jsFjNg6Fgd8VDo59esFgkFUxVuuQ51utSh9VpUtW02qCj8mp95D3
SdihbH2kggV0XbPZKDm2ebqfOvoXAAD//+yj5T9WBQAA
`,
	},

	"/internal/template/hashset_test.go": {
		name:    "hashset_test.go",
		local:   "internal/template/hashset_test.go",
		size:    499,
		modtime: 1556096692,
		compressed: `
H4sIAAAAAAAC/5zQPW6EMBAF4NpzipErO0LItJHSUKVKEbiAQRNABAfZgygi7r7ix7sFW6worWd/78mj
rXvbEDIN469lAuiG8c8zKhCSKXDnGgka4GdyNZYU+NOGtiBWjG9HnpYa/0Gspy1IcL2sNAbiNRCeePIO
v2iOjzWIRcNysDm5uh2s72NcPex8sx3NBTG+f7xGg6jS78kpmcljzEkUVSzdChPcKxLM9m13wZgLhjEn
5RrzxLkImfjntwAAAP//T3U6SvMBAAA=
`,
	},

	"/internal/template/set_test.go": {
		name:    "set_test.go",
		local:   "internal/template/set_test.go",
		size:    5083,
		modtime: 1556097824,
		compressed: `
H4sIAAAAAAAC/+xYz2/bNhQ+i3/FA09UyzHZsNOSHrKiwAZ0O9TZKSgGSn625dCUKtLZikD/+/BERrYk
N7YRp+jQnELx/fq+TxT9Xiqd3+o5gsdVZbRHxopVVdYeBEu4K2vP6a+v89LexWVh546WHp0v7JwzlvB5
4RfrTOXl6sz5Gn2+qM9a++zzmXYOKU/KmP9cITj0UFiP9UznCPcsuZpOxTuDK7Q+bZ+ujBFKqc3eB1yV
dyiGGyO/twZ1LWhRWq8L67oQyMrSbPYHkdH6Hq1ICRtLrsuJKXIUKdx8jF6sYWy2tjkQsQl64eFV1EBd
S7D4zwQ9kIdIiWRK3PDTWptJKxpZf3kTHPqhjtwl4L8V5h6UUkHlNkES5FPvKJHwEgxaETxTCU61mCXw
thAZ537BU5Ykhoo51RFhSVLM4G8J5W2wiFe/abeYoE8vaI9qJfTGVQgwMkAtJCxJkyBScEtq9OvaQjwN
6m25qnSNwtwUH5WI6CWYm+XmMYVLOKfghqA0LEnQoCMoncL3tDsra0J5R5Za2zlCLNq6vwFdVWingp4k
3D3kGqoUzCZlZPXqw9oKfjWdcjnWP8jcIgnvsNWq/+IopaNtp+i0cs2/4CMh2IjkCcuSKAW5nl9AAZfw
4zktXr+Ob20bVHMMsCtjTiMJfVBccwk8e1SaB4evAGNT72X1snpZfU+rI6+g0E4cfgXtumtyHiyxV9kP
In8yiL2ldhU46q7dTVQCn/bYth5bKjzCespPAOrgqv1abXt4TJ2un3yG3HuEPaZ0bGpPVn3YTPl6jdRr
dl01nTgKic+Q7QybaeMGcdiPQ/5UJgfUfGasp/ye9gnfO/E9UhLyw3htUuAoxUkoHoHgq5B4j/bZ3s/P
3QT2hJrDpOeDpA9jZ4Y2X6x0fUuB2SbtrztmTwk2zGz3LMkCpj/0LcJftvi07n5jtpMEbMM5I1N/bs8Z
A+St+zK6L+ES7AUsH5zjVBL/d6B+96UWy7QNa8LQsj2aNkG/bDQyjTFmauLL6rpYYbgfh6geA/VFTE1M
rGu/ybxHjXEue/YT/ABFOmbU/3H/lknFpuJAXsMb+1tm1l3tB3KL5/P/QG38KTXsvwAAAP//f5DPjNsT
AAA=
`,
	},

	"/internal/template/treeset.go": {
		name:    "treeset.go",
		local:   "internal/template/treeset.go",
		size:    1901,
		modtime: 1556097419,
		compressed: `
H4sIAAAAAAAC/7SVwW/TMBTGz35/xaMH5EyZOw1OFTuMgcSkMaRuwAGhyUtfu2pOHNlOxlT1f0d2nCaF
RrSTuKWO3/u+7xf7tZTZo1wQOspLJR0BLPNSG4cc2Mg+F9kIgI0WS/dQ3YtM5+OF1gtF43tniEaQALjn
kvDWEN2QQ+tMlTlcAct0XkpDOK+KjH9UlFPhUowPCS4LB8BIkcWj0Eu89z0AWF6h1xXT758rR79gHSX8
plh+qMw3qSpqF31Dvxs54VGvaYJXZC3X7oHMHTaeLh3lCd5rrbxWeIWTM2z2CL5VDsyQq0yBJKIpTiIo
p01B8yPBd3iy8XBNTxEd/3eSBI9azquN2uu4tALWwphgfEiBsfEYT4/fHL8N/IAF5JMY75qe+GmSAlt3
UOxGJEGnPQBedy46LH0LPQxbNqzoGQnpJ4hYDwvOjc6jZP8DtJ+9k6z/gN+w3d30fDbrR1gBsyKvxJXO
HnkCbEZzMhiWvhYqLlrhOYkplUpm9MVcFpaM41a0SJJkUOxcKa5QCHGY5FwbvEux9gfMyGJBGA7dXlaG
eE4p1zW9NP0HUuRoj9CNzP/JvcvEUNwLRdLww0I2NXOpLA2ku9CFk8vCbt2DOBJCz+kOnWknFI9s1Psk
7R5EW82/mR6iPIR2OcdXA3bC+9ZyoAKMrT3xdtGZoYt2RQUPg+plZEL57s63+kYtM+IJ/vjZGwb7aCgf
PpePxDelKZ6kW6LdaTi3GRUzHmZwvfNPgCk8Q1mWfpvybbqZ5ftsUWLrLqSCNfwOAAD//7cFmXBtBwAA
`,
	},

	"/internal/template/treeset_test.go": {
		name:    "treeset_test.go",
		local:   "internal/template/treeset_test.go",
		size:    666,
		modtime: 1556096722,
		compressed: `
H4sIAAAAAAAC/8SRv27DIBCHZ+4pTkxQIYuslbqk6tqhyQuAdXWthIsFZ2Wo8u6V/5AO6eSlAxJwPz6+
gyG0p9ARCqXhHIQA+jRcsqABpYvknruiQWmhIj13GizA58gtHqnIMRMdSIzg01pvjha/QU2rueBwChuL
hWQqqEwyZsZ3utbDcyA4jPh2pkQsFntewjW9ejSvlzSETCY0ZtmyDuN9bkGpm4Vp3FbJPXH7lUI+1cvi
r+l+NmW6Hkjw+eU/REHF5mNko3d6fagHPxVrC7O+w0XY4W7p9E7wfgPD+wfKNswfnI0gX3/wJwAA//8U
u2iImgIAAA==
`,
	},

	"/internal/template": {
		name:  "template",
		local: `./internal/template/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./internal/template/": {
		_escData["/internal/template/element.go"],
		_escData["/internal/template/hashset.go"],
		_escData["/internal/template/hashset_test.go"],
		_escData["/internal/template/set_test.go"],
		_escData["/internal/template/treeset.go"],
		_escData["/internal/template/treeset_test.go"],
	},
}
