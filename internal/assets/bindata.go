// Code generated by "esc -pkg assets -o internal/assets/bindata.go ./internal/template/"; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/internal/template/element.go": {
		name:    "element.go",
		local:   "internal/template/element.go",
		size:    43,
		modtime: 1556031448,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKEnNLchJLEnl4iqpLEhVcM1JzU3NK1HIzCtJLUpLTE6truUCBAAA//+O
KzUSKwAAAA==
`,
	},

	"/internal/template/hashset.go": {
		name:    "hashset.go",
		local:   "internal/template/hashset.go",
		size:    1294,
		modtime: 1556037321,
		compressed: `
H4sIAAAAAAAC/6ySQWvcMBCFz5pfMc2hyMWYnlP2EEqhh7SHTUsPyxJUe5wajyQjyW6D8X8v3midhV2F
GHIdMe+b9/Q6VbbqgTCQ7lgFAmh0Z11ACeLKP5ryCjKA8NgRflX+zx0F9MH1ZcARBDF51KrbfWHSZML+
6WmcAITucV4vtr++9YH+wQRQ96bE7/Q3CskMPxw1RxCOQu8Mvo+jEcRB//oiYJxyENMiKv0ileFNVckB
40Y2S/tC98WtLVuZgaioJoeH0U/DceiLmbUb9rjBZ0ZS/4ZZMhZFsY5SW4f3OQ54vUGnzAMhz4spesrg
lrQdaLXHipgCySdYjkP2kvobOzxnp8x9ZlJOrvo23CQ6kiBYE1Rj/GmAv63lBbm9wNw+Q+9ztO1scPm2
pby2fRl5nuoacCrcpsbzmz7hO9seno/H1Yo9gRCHYh2HwfV0+eZbMjLDxoTXnhcVmUz850TBftg7bkqS
Ge72MYfXIni2qFVLclnN8WN+yow5nYQUSzJHwbhB1XVkKsnHFi53wwT/AwAA//9rUm6GDgUAAA==
`,
	},

	"/internal/template/hashset_test.go": {
		name:    "hashset_test.go",
		local:   "internal/template/hashset_test.go",
		size:    127,
		modtime: 1556040693,
		compressed: `
H4sIAAAAAAAC/zTLQarCMBjE8XXmFB9d5Xs8PIcrN/YCoYy1aGNIpriQ3l0iuhx+8y9puqWZJq7lnkRg
WcujyiLCIDYteR7gwGXLk41sOqZ2PVNR9vf1w+j2QujrA//Wz9GtUR1Cpbaa7cTnL3aE3bHjHQAA//9N
gVWlfwAAAA==
`,
	},

	"/internal/template/set_test.go": {
		name:    "set_test.go",
		local:   "internal/template/set_test.go",
		size:    2646,
		modtime: 1556041376,
		compressed: `
H4sIAAAAAAAC/7xWTU8bPRA+279i5JP3lWU4vKeqHCLEjRPhhlDl7E7CUse7tR1ahPLfq7G3G3aTkkQk
PbH2fDwftoe0pvxuFggRl601ETmvl23jI0jORGh8FPQ3+totAn1GDLF2C8E5E4s6Pq1mumyWFyF6jOWT
v0jx+euFCQGpuOA8vrYIASPULqKfmxLhjbNJVckbi0t0sUiribVSa73Zu8Nl84JyvLGVd23ReEkfjYum
dqEvgVnT2M3+qLKL3qKTBXHj7L6Z2rpEWcDDY5fF15zPV64EEjbFKCP813mg7xU4/DnFCJQhCxJZkDb8
sTJ2mkyj6JernDAsDZSuAH+1WEbQWmeXUwOW7dM31EhGBRadzJmFgqATZwUiAVFwEZ9EwRmzBBZ0L4Qz
Roeo89KqTKRW8EyKswUJkHmMK++gO2p93Sxb41Hah/pRy46aAvvwvFkW8BUuOWNrgkGLgcB7597WnLF5
4+GbgheKeOMWCB1cSr8C07boKkkrBS/UZ71DfQ7bglM06ruVk2JSVUJt+5rtS0zy2SQPhgdCLUOyRtMt
FEb8JUdBjpHADezE2tMg030URigQsw8Z/El4RyM/hcNpbOEpEKXIke6d7SdRfprEXqhdAEf5vVuoAlEN
1KaMdy58oLoSJyB1MOoQK422Y3D6WXiG3nuMPQa6G8gnQx8PjOhXSHOy/49AN45KujXMdpbNjQ2jOhzW
ofiskgMwz8z1lO9pn/GDGz8QpaA8TNemBW61OInEIxj8ExG36M52Pv/3vx4+gTluejlquua/AwAA//+N
AIleVgoAAA==
`,
	},

	"/internal/template/treeset.go": {
		name:    "treeset.go",
		local:   "internal/template/treeset.go",
		size:    2104,
		modtime: 1556041197,
		compressed: `
H4sIAAAAAAAC/6xVQW/TMBQ+27/isQOyIXjbtaKTJsRtcOiGOEwV8pKXYdVxguOETlX/O3LiJh1N0hZx
c579vu97732OCxmv5DOCw6zQ0iGlKity64BRclG+mPiCckrdS4HwYBHv0UHpbBU72FAS51khLUJamZh9
1pihcRGEBQdlHKUENZbwuAxRSklWgQcWi+9fKodruqXUA8BX/B0o2HFgDu92ejaUWHSVNfA2hDaU7LTN
ICwiSrYdFSu7dA63ScLqHnxDSSmyStzl8YpxShJM0UIT+mZ0CJZC+iw+inirNdMghDgPN80t/Iightkc
rDTPCNon9nxjRciDIlSy9igfrltUFQFq7HFL0QzGg19eQqpMAs8WpUMLuUFKiEqhFKF5rG6yOdzAVZPS
oM9B+eWTRbmihGy9OJ/m927m4eRPlEkETirtuVvWx5lK1sto96WS9WzZFNlI6k9dvYrKokCTsPY7Ag8s
hOATR+qpTS+pzd8C6hJDn8eRRjq/wCyv8R8cZEMin8L97z7qWccKskMFne8m/FVJPeWl+fxUM30MB9tr
3uycZqv3195Yg746bqujxhns3ieN0rKTTXCobBg1N04qU+5P5SnPdUezGOBZ9EThB+mHsAPi00yHxjuH
b8x/KoU3r0S0BgjyUqlL7IYfgs5WOCw1nmhKEDBm0iOG3Kf+S06rcVDPHRrWPE5nTkWjCeYamclDfq9V
jIz37+ipFM31yOQKWZca7RPy7j7Xg43Sj2oJc6j3W6Dplv4JAAD//yHOFaY4CAAA
`,
	},

	"/internal/template/treeset_test.go": {
		name:    "treeset_test.go",
		local:   "internal/template/treeset_test.go",
		size:    216,
		modtime: 1556040782,
		compressed: `
H4sIAAAAAAAC/zyOPYrEMAyFa+sUwpW1hFxi2XabzQWc8DaYiR1jK0wx5O6D8zOFQNL3PXjZTw8/gxUx
L15BFGJei7IjY6uWkOZqyVhF1ZBmS0L0v6WJB1QdCvAHdcpfF+8H4ReZdh2g4yY74QptwBToVhL/4nmH
D8F3PPLPgoikwiGd8m1fPfrvNWZf4Hzvzpd0PH52IWN2oTY7vQMAAP//eRlXtdgAAAA=
`,
	},

	"/internal/template": {
		name:  "template",
		local: `./internal/template/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./internal/template/": {
		_escData["/internal/template/element.go"],
		_escData["/internal/template/hashset.go"],
		_escData["/internal/template/hashset_test.go"],
		_escData["/internal/template/set_test.go"],
		_escData["/internal/template/treeset.go"],
		_escData["/internal/template/treeset_test.go"],
	},
}
