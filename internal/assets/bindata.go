// Code generated by "esc -pkg assets -o internal/assets/bindata.go ./internal/template/"; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/internal/template/element.go": {
		name:    "element.go",
		local:   "internal/template/element.go",
		size:    43,
		modtime: 1556031448,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKEnNLchJLEnl4iqpLEhVcM1JzU3NK1HIzCtJLUpLTE6truUCBAAA//+O
KzUSKwAAAA==
`,
	},

	"/internal/template/hashset.go": {
		name:    "hashset.go",
		local:   "internal/template/hashset.go",
		size:    1366,
		modtime: 1556042485,
		compressed: `
H4sIAAAAAAAC/6ySQWvbQBCFz5pf8ZpDWRWh9JziQyiFHtIenJYejAlbeWQLjXaFduU2GP33ImmtGGyF
GHodad735u2rdVbqLcNzVYv2TFRUtW08FEU37tlkNxQT+eea8VW73SN7ON+0mceBIhZ2qHS9+iJcsfHr
8dOhI4qqFv16uvz1rfX8lzqivDUZvvOfIKRifDhqHihq2LeNwfswOlA06N9dBBy6hKJuElVukopxv9mo
PcJG3Eu7tGrTB5uVKqZowzk3GEY/jYShS3vWar/GAi+MWf17ESVI0/Q6Sm4bPCXY426BRpstQ/rFOfrc
gUuu7J6vvnHDwp7VCEuwj19T/88XnrPnjvssrBt11bNhMdORGYI1XhfGnQb421qZkMsLzOUL9CmBLfsD
p2ebymvL15HnqV4Dngu3yHHu6RPe2XL4fDSXa3FMUTQU6zj0TcuXPT+wUTEK499qLygKm/DOQ8Fub/HD
PkqRMcYfHLSBGwbZGEthttAisDn8jsFjNg6Fgd8VDo59esFgkFUxVuuQ51utSh9VpUtW02qCj8mp95D3
SdihbH2kggV0XbPZKDm2ebqfOvoXAAD//+yj5T9WBQAA
`,
	},

	"/internal/template/hashset_test.go": {
		name:    "hashset_test.go",
		local:   "internal/template/hashset_test.go",
		size:    127,
		modtime: 1556040693,
		compressed: `
H4sIAAAAAAAC/zTLQarCMBjE8XXmFB9d5Xs8PIcrN/YCoYy1aGNIpriQ3l0iuhx+8y9puqWZJq7lnkRg
WcujyiLCIDYteR7gwGXLk41sOqZ2PVNR9vf1w+j2QujrA//Wz9GtUR1Cpbaa7cTnL3aE3bHjHQAA//9N
gVWlfwAAAA==
`,
	},

	"/internal/template/set_test.go": {
		name:    "set_test.go",
		local:   "internal/template/set_test.go",
		size:    3994,
		modtime: 1556072383,
		compressed: `
H4sIAAAAAAAC/+xXz0/rOBA+23/FyCcHLNOV9rTAoUJIe+BEuSG0cpNpG3CdrO3yHkL9358mDi0JfbQV
hcvj1LHnx/fNZ8ea1iZ/MFOEiPPamoicl/O68hEkZyJUPgr6jb5000BmxBBLNxWcMzEt42wx1nk1PwnR
Y8xn/qTxT55OTAhIyRnn8alGCBihdBH9xOQIz5wNi0JeWpyji1mzGlortdbrvWucV48o+xtv4i4sGi/J
qFw0pQurFBhXlV3v9zJb7xU6mRE3zm6qkS1zlBnc3rVRfMn5ZOFyoMZGGGWEo1YDfaPA4Y8RRqAImVGT
GfWG/y+MHTWikfef8xTQTQ0UrgB/1phH0FonlZsCLMmnL6mQjAosOpkiMwVBN5wViAaInNM4ExlnzBJY
0KtGOGPlBP5TUD0kjzz614TZCGN2SnuExeiYdUqwKlEtFdyTJkmkFMY8xoV30N4GfVHNa+NR2tvyTsuW
vQJ7e79eZnAGA0peEpUlZwwtBqKyUviZdieVJ5aP5PHGTRFa0Cb8HExdoyskrRQ8vtTqq5TcNuPkjfp6
4aQYFoVQb/VPMjdM0hk2WnUPjkoG2g6abqsw4jcxCpKPmjwgLIlSUujgFEo4g78GZBwft6f2mtRyH2JD
aw8jCX1QwggFYvyuNC8BX0BjjfdtfVvf1p9k7fkEpXFi9ydo01uTi+RpZ5XtJPIPk9gKtQlgr7d2c6MK
RNHptol4pcI7XRfiAKR2Ru1iNePhPjirefITam8Rdh/odqg9GHp/mIp+gTRrrqZqunGU0q5hvDFtYmzo
5WE3D8VHO9kB85O5HvJ72iZ858Z3mlKQ79bXugS+KXGQFvdg8CVNXKH7tPP5e/UP7AOY/aKDXtEl/xUA
AP//pRZAdJoPAAA=
`,
	},

	"/internal/template/treeset.go": {
		name:    "treeset.go",
		local:   "internal/template/treeset.go",
		size:    2234,
		modtime: 1556072345,
		compressed: `
H4sIAAAAAAAC/6xVwW7bOBA9k18xm8OC2lXl5GrUBYKit7QHJ0UPgVEw0sghTJEqSakODP97QYmSnFqy
46I3ajTz3puZJ7Hk6YavERwWpeQOKRVFqY0DRsmVfVHpFY0odS8lwoNBvEcH1pkqdbCjJNVFyQ1CXqmU
fZJYoHIxhEMEQjlKyWwG2EZsDLbgUqIBoTLcgrBDwGFBCUq08LgKCJSSogIvIll++1w53NI9pZ4MvuDP
IIedFxHBf532HSUGXWUU/BtCO0q6PuYQDjEl+56K2b48gtssY/UAvqPEJkWV3Ol0wyJKMszRQBP6qmQI
2oT7qmgS8VZKJiFJkstwc23geww1zBdguFojSF848E01wY+aENnWo7y7aVFF7Fc24NqkWYwHn80gFyqD
tUHu0IBW6AdYlD7bJmGArG4QIkqIyMG/fQ/XTX1DtQDhj08G+YYSsgeUFiFkLhZd6mzmY8J5n+CPikvP
FoPS7lmoNTgNmfZ57UY9kG/ZM3qSDx3OM/IsBseFbDX6Xh7nItuu4u5JZNv5qhld0+iQdf0qyssSVcba
5xg8cJIk0YmU+tRLL6mtDxPYnUGa2OcSC13jH/jShMLoFO5fd+fAOtWQGWvoco/2nmlteOTOA6uNufLQ
TJ19O6vt6Rtt9f+NN9aor87b6qxxRqf3USI37M0mOFY2jqqV40LZw608aS17muUIz3IgCr9dv4QOKDrN
dGy8S/im/Cdy+OeViNYAQV7OpcV++SHoTIXjUtMTQwkCpkx6xpCH1L/JaTWO6rlDxZor78KtSFTBXBM7
edD3UqTIouF2fitF83kUfIOsL40PCaP+e65HByUfxQoWUB+OQNI9/RUAAP///uskvboIAAA=
`,
	},

	"/internal/template/treeset_test.go": {
		name:    "treeset_test.go",
		local:   "internal/template/treeset_test.go",
		size:    216,
		modtime: 1556040782,
		compressed: `
H4sIAAAAAAAC/zyOPYrEMAyFa+sUwpW1hFxi2XabzQWc8DaYiR1jK0wx5O6D8zOFQNL3PXjZTw8/gxUx
L15BFGJei7IjY6uWkOZqyVhF1ZBmS0L0v6WJB1QdCvAHdcpfF+8H4ReZdh2g4yY74QptwBToVhL/4nmH
D8F3PPLPgoikwiGd8m1fPfrvNWZf4Hzvzpd0PH52IWN2oTY7vQMAAP//eRlXtdgAAAA=
`,
	},

	"/internal/template": {
		name:  "template",
		local: `./internal/template/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./internal/template/": {
		_escData["/internal/template/element.go"],
		_escData["/internal/template/hashset.go"],
		_escData["/internal/template/hashset_test.go"],
		_escData["/internal/template/set_test.go"],
		_escData["/internal/template/treeset.go"],
		_escData["/internal/template/treeset_test.go"],
	},
}
